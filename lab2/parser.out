Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    UMINUS

Grammar

Rule 0     S' -> instructions
Rule 1     instructions -> instruction
Rule 2     instructions -> instruction instructions
Rule 3     instruction -> block
Rule 4     instruction -> conditional
Rule 5     instruction -> loop
Rule 6     instruction -> statement ;
Rule 7     instruction -> error ;
Rule 8     statement -> assignment
Rule 9     statement -> flow_keyword
Rule 10    statement -> return
Rule 11    statement -> print
Rule 12    flow_keyword -> BREAK
Rule 13    flow_keyword -> CONTINUE
Rule 14    expression -> comparison_expression
Rule 15    expression -> numeric_expression
Rule 16    block -> { instructions }
Rule 17    block -> { error }
Rule 18    print -> PRINT print_body
Rule 19    print_body -> string
Rule 20    print_body -> expression
Rule 21    print_body -> string , print_body
Rule 22    print_body -> expression , print_body
Rule 23    return -> RETURN expression
Rule 24    return -> RETURN
Rule 25    string -> STRING
Rule 26    vector -> [ vector_body ]
Rule 27    vector -> [ ]
Rule 28    vector_body -> numeric_expression
Rule 29    vector_body -> vector_body , numeric_expression
Rule 30    matrix -> [ matrix_body ]
Rule 31    matrix -> [ ]
Rule 32    matrix_body -> vector
Rule 33    matrix_body -> matrix_body , vector
Rule 34    array_range -> var [ expression , expression ]
Rule 35    fun -> fun_name ( numeric_expression )
Rule 36    fun -> fun_name ( error )
Rule 37    fun_name -> ZEROS
Rule 38    fun_name -> ONES
Rule 39    fun_name -> EYE
Rule 40    loop -> while
Rule 41    loop -> for
Rule 42    while -> WHILE ( expression ) instruction
Rule 43    for -> FOR ID = numeric_expression : numeric_expression instruction
Rule 44    conditional -> IF ( expression ) instruction
Rule 45    conditional -> IF ( expression ) instruction ELSE instruction
Rule 46    assignment_lhs -> var
Rule 47    assignment_lhs -> array_range
Rule 48    assignment -> assignment_lhs assignment_operator expression
Rule 49    assignment -> assignment_lhs = string
Rule 50    assignment_operator -> =
Rule 51    assignment_operator -> ADDASSIGN
Rule 52    assignment_operator -> SUBASSIGN
Rule 53    assignment_operator -> MULASSIGN
Rule 54    assignment_operator -> DIVASSIGN
Rule 55    var -> ID
Rule 56    var -> var [ numeric_expression ]
Rule 57    num -> INTNUM
Rule 58    num -> FLOAT
Rule 59    num -> var
Rule 60    unary_op -> negation
Rule 61    unary_op -> transposition
Rule 62    negation -> - numeric_expression
Rule 63    transposition -> numeric_expression '
Rule 64    numeric_expression -> num
Rule 65    numeric_expression -> matrix
Rule 66    numeric_expression -> unary_op
Rule 67    numeric_expression -> fun
Rule 68    numeric_expression -> ( numeric_expression )
Rule 69    numeric_expression -> numeric_expression + numeric_expression
Rule 70    numeric_expression -> numeric_expression - numeric_expression
Rule 71    numeric_expression -> numeric_expression * numeric_expression
Rule 72    numeric_expression -> numeric_expression / numeric_expression
Rule 73    numeric_expression -> numeric_expression DOTADD numeric_expression
Rule 74    numeric_expression -> numeric_expression DOTSUB numeric_expression
Rule 75    numeric_expression -> numeric_expression DOTMUL numeric_expression
Rule 76    numeric_expression -> numeric_expression DOTDIV numeric_expression
Rule 77    comparison_expression -> numeric_expression LT numeric_expression
Rule 78    comparison_expression -> numeric_expression GT numeric_expression
Rule 79    comparison_expression -> numeric_expression EQ numeric_expression
Rule 80    comparison_expression -> numeric_expression NE numeric_expression
Rule 81    comparison_expression -> numeric_expression GE numeric_expression
Rule 82    comparison_expression -> numeric_expression LE numeric_expression
Rule 83    comparison_expression -> ( comparison_expression )

Terminals, with rules where they appear

'                    : 63
(                    : 35 36 42 44 45 68 83
)                    : 35 36 42 44 45 68 83
*                    : 71
+                    : 69
,                    : 21 22 29 33 34
-                    : 62 70
/                    : 72
:                    : 43
;                    : 6 7
=                    : 43 49 50
ADDASSIGN            : 51
BREAK                : 12
CONTINUE             : 13
DIVASSIGN            : 54
DOTADD               : 73
DOTDIV               : 76
DOTMUL               : 75
DOTSUB               : 74
ELSE                 : 45
EQ                   : 79
EYE                  : 39
FLOAT                : 58
FOR                  : 43
GE                   : 81
GT                   : 78
ID                   : 43 55
IF                   : 44 45
INTNUM               : 57
LE                   : 82
LT                   : 77
MULASSIGN            : 53
NE                   : 80
ONES                 : 38
PRINT                : 18
RETURN               : 23 24
STRING               : 25
SUBASSIGN            : 52
UMINUS               : 
WHILE                : 42
ZEROS                : 37
[                    : 26 27 30 31 34 56
]                    : 26 27 30 31 34 56
error                : 7 17 36
{                    : 16 17
}                    : 16 17

Nonterminals, with rules where they appear

array_range          : 47
assignment           : 8
assignment_lhs       : 48 49
assignment_operator  : 48
block                : 3
comparison_expression : 14 83
conditional          : 4
expression           : 20 22 23 34 34 42 44 45 48
flow_keyword         : 9
for                  : 41
fun                  : 67
fun_name             : 35 36
instruction          : 1 2 42 43 44 45 45
instructions         : 2 16 0
loop                 : 5
matrix               : 65
matrix_body          : 30 33
negation             : 60
num                  : 64
numeric_expression   : 15 28 29 35 43 43 56 62 63 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82
print                : 11
print_body           : 18 21 22
return               : 10
statement            : 6
string               : 19 21 49
transposition        : 61
unary_op             : 66
var                  : 34 46 56 59
vector               : 32 33
vector_body          : 26 29
while                : 40

Parsing method: LALR

state 0

    (0) S' -> . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instruction instructions
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 1

    (0) S' -> instructions .



state 2

    (1) instructions -> instruction .
    (2) instructions -> instruction . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instruction instructions
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    $end            reduce using rule 1 (instructions -> instruction .)
    }               reduce using rule 1 (instructions -> instruction .)
    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 2
    instructions                   shift and go to state 26
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 3

    (3) instruction -> block .

    error           reduce using rule 3 (instruction -> block .)
    {               reduce using rule 3 (instruction -> block .)
    IF              reduce using rule 3 (instruction -> block .)
    WHILE           reduce using rule 3 (instruction -> block .)
    FOR             reduce using rule 3 (instruction -> block .)
    BREAK           reduce using rule 3 (instruction -> block .)
    CONTINUE        reduce using rule 3 (instruction -> block .)
    RETURN          reduce using rule 3 (instruction -> block .)
    PRINT           reduce using rule 3 (instruction -> block .)
    ID              reduce using rule 3 (instruction -> block .)
    $end            reduce using rule 3 (instruction -> block .)
    }               reduce using rule 3 (instruction -> block .)
    ELSE            reduce using rule 3 (instruction -> block .)


state 4

    (4) instruction -> conditional .

    error           reduce using rule 4 (instruction -> conditional .)
    {               reduce using rule 4 (instruction -> conditional .)
    IF              reduce using rule 4 (instruction -> conditional .)
    WHILE           reduce using rule 4 (instruction -> conditional .)
    FOR             reduce using rule 4 (instruction -> conditional .)
    BREAK           reduce using rule 4 (instruction -> conditional .)
    CONTINUE        reduce using rule 4 (instruction -> conditional .)
    RETURN          reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 4 (instruction -> conditional .)
    ID              reduce using rule 4 (instruction -> conditional .)
    $end            reduce using rule 4 (instruction -> conditional .)
    }               reduce using rule 4 (instruction -> conditional .)
    ELSE            reduce using rule 4 (instruction -> conditional .)


state 5

    (5) instruction -> loop .

    error           reduce using rule 5 (instruction -> loop .)
    {               reduce using rule 5 (instruction -> loop .)
    IF              reduce using rule 5 (instruction -> loop .)
    WHILE           reduce using rule 5 (instruction -> loop .)
    FOR             reduce using rule 5 (instruction -> loop .)
    BREAK           reduce using rule 5 (instruction -> loop .)
    CONTINUE        reduce using rule 5 (instruction -> loop .)
    RETURN          reduce using rule 5 (instruction -> loop .)
    PRINT           reduce using rule 5 (instruction -> loop .)
    ID              reduce using rule 5 (instruction -> loop .)
    $end            reduce using rule 5 (instruction -> loop .)
    }               reduce using rule 5 (instruction -> loop .)
    ELSE            reduce using rule 5 (instruction -> loop .)


state 6

    (6) instruction -> statement . ;

    ;               shift and go to state 27


state 7

    (7) instruction -> error . ;

    ;               shift and go to state 28


state 8

    (16) block -> { . instructions }
    (17) block -> { . error }
    (1) instructions -> . instruction
    (2) instructions -> . instruction instructions
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    error           shift and go to state 30
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instructions                   shift and go to state 29
    instruction                    shift and go to state 2
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 9

    (44) conditional -> IF . ( expression ) instruction
    (45) conditional -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 31


state 10

    (40) loop -> while .

    error           reduce using rule 40 (loop -> while .)
    {               reduce using rule 40 (loop -> while .)
    IF              reduce using rule 40 (loop -> while .)
    WHILE           reduce using rule 40 (loop -> while .)
    FOR             reduce using rule 40 (loop -> while .)
    BREAK           reduce using rule 40 (loop -> while .)
    CONTINUE        reduce using rule 40 (loop -> while .)
    RETURN          reduce using rule 40 (loop -> while .)
    PRINT           reduce using rule 40 (loop -> while .)
    ID              reduce using rule 40 (loop -> while .)
    $end            reduce using rule 40 (loop -> while .)
    }               reduce using rule 40 (loop -> while .)
    ELSE            reduce using rule 40 (loop -> while .)


state 11

    (41) loop -> for .

    error           reduce using rule 41 (loop -> for .)
    {               reduce using rule 41 (loop -> for .)
    IF              reduce using rule 41 (loop -> for .)
    WHILE           reduce using rule 41 (loop -> for .)
    FOR             reduce using rule 41 (loop -> for .)
    BREAK           reduce using rule 41 (loop -> for .)
    CONTINUE        reduce using rule 41 (loop -> for .)
    RETURN          reduce using rule 41 (loop -> for .)
    PRINT           reduce using rule 41 (loop -> for .)
    ID              reduce using rule 41 (loop -> for .)
    $end            reduce using rule 41 (loop -> for .)
    }               reduce using rule 41 (loop -> for .)
    ELSE            reduce using rule 41 (loop -> for .)


state 12

    (8) statement -> assignment .

    ;               reduce using rule 8 (statement -> assignment .)


state 13

    (9) statement -> flow_keyword .

    ;               reduce using rule 9 (statement -> flow_keyword .)


state 14

    (10) statement -> return .

    ;               reduce using rule 10 (statement -> return .)


state 15

    (11) statement -> print .

    ;               reduce using rule 11 (statement -> print .)


state 16

    (42) while -> WHILE . ( expression ) instruction

    (               shift and go to state 32


state 17

    (43) for -> FOR . ID = numeric_expression : numeric_expression instruction

    ID              shift and go to state 33


state 18

    (55) var -> ID .

    [               reduce using rule 55 (var -> ID .)
    =               reduce using rule 55 (var -> ID .)
    ADDASSIGN       reduce using rule 55 (var -> ID .)
    SUBASSIGN       reduce using rule 55 (var -> ID .)
    MULASSIGN       reduce using rule 55 (var -> ID .)
    DIVASSIGN       reduce using rule 55 (var -> ID .)
    LT              reduce using rule 55 (var -> ID .)
    GT              reduce using rule 55 (var -> ID .)
    EQ              reduce using rule 55 (var -> ID .)
    NE              reduce using rule 55 (var -> ID .)
    GE              reduce using rule 55 (var -> ID .)
    LE              reduce using rule 55 (var -> ID .)
    +               reduce using rule 55 (var -> ID .)
    -               reduce using rule 55 (var -> ID .)
    *               reduce using rule 55 (var -> ID .)
    /               reduce using rule 55 (var -> ID .)
    DOTADD          reduce using rule 55 (var -> ID .)
    DOTSUB          reduce using rule 55 (var -> ID .)
    DOTMUL          reduce using rule 55 (var -> ID .)
    DOTDIV          reduce using rule 55 (var -> ID .)
    '               reduce using rule 55 (var -> ID .)
    ;               reduce using rule 55 (var -> ID .)
    ,               reduce using rule 55 (var -> ID .)
    )               reduce using rule 55 (var -> ID .)
    ]               reduce using rule 55 (var -> ID .)
    :               reduce using rule 55 (var -> ID .)
    error           reduce using rule 55 (var -> ID .)
    {               reduce using rule 55 (var -> ID .)
    IF              reduce using rule 55 (var -> ID .)
    WHILE           reduce using rule 55 (var -> ID .)
    FOR             reduce using rule 55 (var -> ID .)
    BREAK           reduce using rule 55 (var -> ID .)
    CONTINUE        reduce using rule 55 (var -> ID .)
    RETURN          reduce using rule 55 (var -> ID .)
    PRINT           reduce using rule 55 (var -> ID .)
    ID              reduce using rule 55 (var -> ID .)


state 19

    (48) assignment -> assignment_lhs . assignment_operator expression
    (49) assignment -> assignment_lhs . = string
    (50) assignment_operator -> . =
    (51) assignment_operator -> . ADDASSIGN
    (52) assignment_operator -> . SUBASSIGN
    (53) assignment_operator -> . MULASSIGN
    (54) assignment_operator -> . DIVASSIGN

    =               shift and go to state 35
    ADDASSIGN       shift and go to state 36
    SUBASSIGN       shift and go to state 37
    MULASSIGN       shift and go to state 38
    DIVASSIGN       shift and go to state 39

    assignment_operator            shift and go to state 34

state 20

    (12) flow_keyword -> BREAK .

    ;               reduce using rule 12 (flow_keyword -> BREAK .)


state 21

    (13) flow_keyword -> CONTINUE .

    ;               reduce using rule 13 (flow_keyword -> CONTINUE .)


state 22

    (23) return -> RETURN . expression
    (24) return -> RETURN .
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    ;               reduce using rule 24 (return -> RETURN .)
    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    expression                     shift and go to state 40
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 23

    (18) print -> PRINT . print_body
    (19) print_body -> . string
    (20) print_body -> . expression
    (21) print_body -> . string , print_body
    (22) print_body -> . expression , print_body
    (25) string -> . STRING
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    STRING          shift and go to state 62
    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    print_body                     shift and go to state 59
    string                         shift and go to state 60
    expression                     shift and go to state 61
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 24

    (46) assignment_lhs -> var .
    (56) var -> var . [ numeric_expression ]
    (34) array_range -> var . [ expression , expression ]

    =               reduce using rule 46 (assignment_lhs -> var .)
    ADDASSIGN       reduce using rule 46 (assignment_lhs -> var .)
    SUBASSIGN       reduce using rule 46 (assignment_lhs -> var .)
    MULASSIGN       reduce using rule 46 (assignment_lhs -> var .)
    DIVASSIGN       reduce using rule 46 (assignment_lhs -> var .)
    [               shift and go to state 63


state 25

    (47) assignment_lhs -> array_range .

    =               reduce using rule 47 (assignment_lhs -> array_range .)
    ADDASSIGN       reduce using rule 47 (assignment_lhs -> array_range .)
    SUBASSIGN       reduce using rule 47 (assignment_lhs -> array_range .)
    MULASSIGN       reduce using rule 47 (assignment_lhs -> array_range .)
    DIVASSIGN       reduce using rule 47 (assignment_lhs -> array_range .)


state 26

    (2) instructions -> instruction instructions .

    $end            reduce using rule 2 (instructions -> instruction instructions .)
    }               reduce using rule 2 (instructions -> instruction instructions .)


state 27

    (6) instruction -> statement ; .

    error           reduce using rule 6 (instruction -> statement ; .)
    {               reduce using rule 6 (instruction -> statement ; .)
    IF              reduce using rule 6 (instruction -> statement ; .)
    WHILE           reduce using rule 6 (instruction -> statement ; .)
    FOR             reduce using rule 6 (instruction -> statement ; .)
    BREAK           reduce using rule 6 (instruction -> statement ; .)
    CONTINUE        reduce using rule 6 (instruction -> statement ; .)
    RETURN          reduce using rule 6 (instruction -> statement ; .)
    PRINT           reduce using rule 6 (instruction -> statement ; .)
    ID              reduce using rule 6 (instruction -> statement ; .)
    $end            reduce using rule 6 (instruction -> statement ; .)
    }               reduce using rule 6 (instruction -> statement ; .)
    ELSE            reduce using rule 6 (instruction -> statement ; .)


state 28

    (7) instruction -> error ; .

    error           reduce using rule 7 (instruction -> error ; .)
    {               reduce using rule 7 (instruction -> error ; .)
    IF              reduce using rule 7 (instruction -> error ; .)
    WHILE           reduce using rule 7 (instruction -> error ; .)
    FOR             reduce using rule 7 (instruction -> error ; .)
    BREAK           reduce using rule 7 (instruction -> error ; .)
    CONTINUE        reduce using rule 7 (instruction -> error ; .)
    RETURN          reduce using rule 7 (instruction -> error ; .)
    PRINT           reduce using rule 7 (instruction -> error ; .)
    ID              reduce using rule 7 (instruction -> error ; .)
    $end            reduce using rule 7 (instruction -> error ; .)
    }               reduce using rule 7 (instruction -> error ; .)
    ELSE            reduce using rule 7 (instruction -> error ; .)


state 29

    (16) block -> { instructions . }

    }               shift and go to state 64


state 30

    (17) block -> { error . }
    (7) instruction -> error . ;

    }               shift and go to state 65
    ;               shift and go to state 28


state 31

    (44) conditional -> IF ( . expression ) instruction
    (45) conditional -> IF ( . expression ) instruction ELSE instruction
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    expression                     shift and go to state 66
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 32

    (42) while -> WHILE ( . expression ) instruction
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    expression                     shift and go to state 67
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 33

    (43) for -> FOR ID . = numeric_expression : numeric_expression instruction

    =               shift and go to state 68


state 34

    (48) assignment -> assignment_lhs assignment_operator . expression
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    expression                     shift and go to state 69
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 35

    (49) assignment -> assignment_lhs = . string
    (50) assignment_operator -> = .
    (25) string -> . STRING

    (               reduce using rule 50 (assignment_operator -> = .)
    INTNUM          reduce using rule 50 (assignment_operator -> = .)
    FLOAT           reduce using rule 50 (assignment_operator -> = .)
    [               reduce using rule 50 (assignment_operator -> = .)
    ID              reduce using rule 50 (assignment_operator -> = .)
    -               reduce using rule 50 (assignment_operator -> = .)
    ZEROS           reduce using rule 50 (assignment_operator -> = .)
    ONES            reduce using rule 50 (assignment_operator -> = .)
    EYE             reduce using rule 50 (assignment_operator -> = .)
    STRING          shift and go to state 62

    string                         shift and go to state 70

state 36

    (51) assignment_operator -> ADDASSIGN .

    (               reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    INTNUM          reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    FLOAT           reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    [               reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    ID              reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    -               reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    ONES            reduce using rule 51 (assignment_operator -> ADDASSIGN .)
    EYE             reduce using rule 51 (assignment_operator -> ADDASSIGN .)


state 37

    (52) assignment_operator -> SUBASSIGN .

    (               reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    INTNUM          reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    FLOAT           reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    [               reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    ID              reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    -               reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    ONES            reduce using rule 52 (assignment_operator -> SUBASSIGN .)
    EYE             reduce using rule 52 (assignment_operator -> SUBASSIGN .)


state 38

    (53) assignment_operator -> MULASSIGN .

    (               reduce using rule 53 (assignment_operator -> MULASSIGN .)
    INTNUM          reduce using rule 53 (assignment_operator -> MULASSIGN .)
    FLOAT           reduce using rule 53 (assignment_operator -> MULASSIGN .)
    [               reduce using rule 53 (assignment_operator -> MULASSIGN .)
    ID              reduce using rule 53 (assignment_operator -> MULASSIGN .)
    -               reduce using rule 53 (assignment_operator -> MULASSIGN .)
    ZEROS           reduce using rule 53 (assignment_operator -> MULASSIGN .)
    ONES            reduce using rule 53 (assignment_operator -> MULASSIGN .)
    EYE             reduce using rule 53 (assignment_operator -> MULASSIGN .)


state 39

    (54) assignment_operator -> DIVASSIGN .

    (               reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    INTNUM          reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    FLOAT           reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    [               reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    ID              reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    -               reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    ONES            reduce using rule 54 (assignment_operator -> DIVASSIGN .)
    EYE             reduce using rule 54 (assignment_operator -> DIVASSIGN .)


state 40

    (23) return -> RETURN expression .

    ;               reduce using rule 23 (return -> RETURN expression .)


state 41

    (14) expression -> comparison_expression .

    ;               reduce using rule 14 (expression -> comparison_expression .)
    ,               reduce using rule 14 (expression -> comparison_expression .)
    )               reduce using rule 14 (expression -> comparison_expression .)
    ]               reduce using rule 14 (expression -> comparison_expression .)


state 42

    (15) expression -> numeric_expression .
    (77) comparison_expression -> numeric_expression . LT numeric_expression
    (78) comparison_expression -> numeric_expression . GT numeric_expression
    (79) comparison_expression -> numeric_expression . EQ numeric_expression
    (80) comparison_expression -> numeric_expression . NE numeric_expression
    (81) comparison_expression -> numeric_expression . GE numeric_expression
    (82) comparison_expression -> numeric_expression . LE numeric_expression
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 15 (expression -> numeric_expression .)
    ,               reduce using rule 15 (expression -> numeric_expression .)
    )               reduce using rule 15 (expression -> numeric_expression .)
    ]               reduce using rule 15 (expression -> numeric_expression .)
    LT              shift and go to state 71
    GT              shift and go to state 72
    EQ              shift and go to state 73
    NE              shift and go to state 74
    GE              shift and go to state 75
    LE              shift and go to state 76
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 43

    (83) comparison_expression -> ( . comparison_expression )
    (68) numeric_expression -> ( . numeric_expression )
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    comparison_expression          shift and go to state 86
    numeric_expression             shift and go to state 87
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 44

    (64) numeric_expression -> num .

    LT              reduce using rule 64 (numeric_expression -> num .)
    GT              reduce using rule 64 (numeric_expression -> num .)
    EQ              reduce using rule 64 (numeric_expression -> num .)
    NE              reduce using rule 64 (numeric_expression -> num .)
    GE              reduce using rule 64 (numeric_expression -> num .)
    LE              reduce using rule 64 (numeric_expression -> num .)
    +               reduce using rule 64 (numeric_expression -> num .)
    -               reduce using rule 64 (numeric_expression -> num .)
    *               reduce using rule 64 (numeric_expression -> num .)
    /               reduce using rule 64 (numeric_expression -> num .)
    DOTADD          reduce using rule 64 (numeric_expression -> num .)
    DOTSUB          reduce using rule 64 (numeric_expression -> num .)
    DOTMUL          reduce using rule 64 (numeric_expression -> num .)
    DOTDIV          reduce using rule 64 (numeric_expression -> num .)
    '               reduce using rule 64 (numeric_expression -> num .)
    ;               reduce using rule 64 (numeric_expression -> num .)
    ,               reduce using rule 64 (numeric_expression -> num .)
    )               reduce using rule 64 (numeric_expression -> num .)
    ]               reduce using rule 64 (numeric_expression -> num .)
    :               reduce using rule 64 (numeric_expression -> num .)
    error           reduce using rule 64 (numeric_expression -> num .)
    {               reduce using rule 64 (numeric_expression -> num .)
    IF              reduce using rule 64 (numeric_expression -> num .)
    WHILE           reduce using rule 64 (numeric_expression -> num .)
    FOR             reduce using rule 64 (numeric_expression -> num .)
    BREAK           reduce using rule 64 (numeric_expression -> num .)
    CONTINUE        reduce using rule 64 (numeric_expression -> num .)
    RETURN          reduce using rule 64 (numeric_expression -> num .)
    PRINT           reduce using rule 64 (numeric_expression -> num .)
    ID              reduce using rule 64 (numeric_expression -> num .)


state 45

    (65) numeric_expression -> matrix .

    LT              reduce using rule 65 (numeric_expression -> matrix .)
    GT              reduce using rule 65 (numeric_expression -> matrix .)
    EQ              reduce using rule 65 (numeric_expression -> matrix .)
    NE              reduce using rule 65 (numeric_expression -> matrix .)
    GE              reduce using rule 65 (numeric_expression -> matrix .)
    LE              reduce using rule 65 (numeric_expression -> matrix .)
    +               reduce using rule 65 (numeric_expression -> matrix .)
    -               reduce using rule 65 (numeric_expression -> matrix .)
    *               reduce using rule 65 (numeric_expression -> matrix .)
    /               reduce using rule 65 (numeric_expression -> matrix .)
    DOTADD          reduce using rule 65 (numeric_expression -> matrix .)
    DOTSUB          reduce using rule 65 (numeric_expression -> matrix .)
    DOTMUL          reduce using rule 65 (numeric_expression -> matrix .)
    DOTDIV          reduce using rule 65 (numeric_expression -> matrix .)
    '               reduce using rule 65 (numeric_expression -> matrix .)
    ;               reduce using rule 65 (numeric_expression -> matrix .)
    ,               reduce using rule 65 (numeric_expression -> matrix .)
    )               reduce using rule 65 (numeric_expression -> matrix .)
    ]               reduce using rule 65 (numeric_expression -> matrix .)
    :               reduce using rule 65 (numeric_expression -> matrix .)
    error           reduce using rule 65 (numeric_expression -> matrix .)
    {               reduce using rule 65 (numeric_expression -> matrix .)
    IF              reduce using rule 65 (numeric_expression -> matrix .)
    WHILE           reduce using rule 65 (numeric_expression -> matrix .)
    FOR             reduce using rule 65 (numeric_expression -> matrix .)
    BREAK           reduce using rule 65 (numeric_expression -> matrix .)
    CONTINUE        reduce using rule 65 (numeric_expression -> matrix .)
    RETURN          reduce using rule 65 (numeric_expression -> matrix .)
    PRINT           reduce using rule 65 (numeric_expression -> matrix .)
    ID              reduce using rule 65 (numeric_expression -> matrix .)


state 46

    (66) numeric_expression -> unary_op .

    LT              reduce using rule 66 (numeric_expression -> unary_op .)
    GT              reduce using rule 66 (numeric_expression -> unary_op .)
    EQ              reduce using rule 66 (numeric_expression -> unary_op .)
    NE              reduce using rule 66 (numeric_expression -> unary_op .)
    GE              reduce using rule 66 (numeric_expression -> unary_op .)
    LE              reduce using rule 66 (numeric_expression -> unary_op .)
    +               reduce using rule 66 (numeric_expression -> unary_op .)
    -               reduce using rule 66 (numeric_expression -> unary_op .)
    *               reduce using rule 66 (numeric_expression -> unary_op .)
    /               reduce using rule 66 (numeric_expression -> unary_op .)
    DOTADD          reduce using rule 66 (numeric_expression -> unary_op .)
    DOTSUB          reduce using rule 66 (numeric_expression -> unary_op .)
    DOTMUL          reduce using rule 66 (numeric_expression -> unary_op .)
    DOTDIV          reduce using rule 66 (numeric_expression -> unary_op .)
    '               reduce using rule 66 (numeric_expression -> unary_op .)
    ;               reduce using rule 66 (numeric_expression -> unary_op .)
    ,               reduce using rule 66 (numeric_expression -> unary_op .)
    )               reduce using rule 66 (numeric_expression -> unary_op .)
    ]               reduce using rule 66 (numeric_expression -> unary_op .)
    :               reduce using rule 66 (numeric_expression -> unary_op .)
    error           reduce using rule 66 (numeric_expression -> unary_op .)
    {               reduce using rule 66 (numeric_expression -> unary_op .)
    IF              reduce using rule 66 (numeric_expression -> unary_op .)
    WHILE           reduce using rule 66 (numeric_expression -> unary_op .)
    FOR             reduce using rule 66 (numeric_expression -> unary_op .)
    BREAK           reduce using rule 66 (numeric_expression -> unary_op .)
    CONTINUE        reduce using rule 66 (numeric_expression -> unary_op .)
    RETURN          reduce using rule 66 (numeric_expression -> unary_op .)
    PRINT           reduce using rule 66 (numeric_expression -> unary_op .)
    ID              reduce using rule 66 (numeric_expression -> unary_op .)


state 47

    (67) numeric_expression -> fun .

    LT              reduce using rule 67 (numeric_expression -> fun .)
    GT              reduce using rule 67 (numeric_expression -> fun .)
    EQ              reduce using rule 67 (numeric_expression -> fun .)
    NE              reduce using rule 67 (numeric_expression -> fun .)
    GE              reduce using rule 67 (numeric_expression -> fun .)
    LE              reduce using rule 67 (numeric_expression -> fun .)
    +               reduce using rule 67 (numeric_expression -> fun .)
    -               reduce using rule 67 (numeric_expression -> fun .)
    *               reduce using rule 67 (numeric_expression -> fun .)
    /               reduce using rule 67 (numeric_expression -> fun .)
    DOTADD          reduce using rule 67 (numeric_expression -> fun .)
    DOTSUB          reduce using rule 67 (numeric_expression -> fun .)
    DOTMUL          reduce using rule 67 (numeric_expression -> fun .)
    DOTDIV          reduce using rule 67 (numeric_expression -> fun .)
    '               reduce using rule 67 (numeric_expression -> fun .)
    ;               reduce using rule 67 (numeric_expression -> fun .)
    ,               reduce using rule 67 (numeric_expression -> fun .)
    )               reduce using rule 67 (numeric_expression -> fun .)
    ]               reduce using rule 67 (numeric_expression -> fun .)
    :               reduce using rule 67 (numeric_expression -> fun .)
    error           reduce using rule 67 (numeric_expression -> fun .)
    {               reduce using rule 67 (numeric_expression -> fun .)
    IF              reduce using rule 67 (numeric_expression -> fun .)
    WHILE           reduce using rule 67 (numeric_expression -> fun .)
    FOR             reduce using rule 67 (numeric_expression -> fun .)
    BREAK           reduce using rule 67 (numeric_expression -> fun .)
    CONTINUE        reduce using rule 67 (numeric_expression -> fun .)
    RETURN          reduce using rule 67 (numeric_expression -> fun .)
    PRINT           reduce using rule 67 (numeric_expression -> fun .)
    ID              reduce using rule 67 (numeric_expression -> fun .)


state 48

    (62) negation -> - . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 88
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 49

    (57) num -> INTNUM .

    LT              reduce using rule 57 (num -> INTNUM .)
    GT              reduce using rule 57 (num -> INTNUM .)
    EQ              reduce using rule 57 (num -> INTNUM .)
    NE              reduce using rule 57 (num -> INTNUM .)
    GE              reduce using rule 57 (num -> INTNUM .)
    LE              reduce using rule 57 (num -> INTNUM .)
    +               reduce using rule 57 (num -> INTNUM .)
    -               reduce using rule 57 (num -> INTNUM .)
    *               reduce using rule 57 (num -> INTNUM .)
    /               reduce using rule 57 (num -> INTNUM .)
    DOTADD          reduce using rule 57 (num -> INTNUM .)
    DOTSUB          reduce using rule 57 (num -> INTNUM .)
    DOTMUL          reduce using rule 57 (num -> INTNUM .)
    DOTDIV          reduce using rule 57 (num -> INTNUM .)
    '               reduce using rule 57 (num -> INTNUM .)
    ;               reduce using rule 57 (num -> INTNUM .)
    ,               reduce using rule 57 (num -> INTNUM .)
    )               reduce using rule 57 (num -> INTNUM .)
    ]               reduce using rule 57 (num -> INTNUM .)
    :               reduce using rule 57 (num -> INTNUM .)
    error           reduce using rule 57 (num -> INTNUM .)
    {               reduce using rule 57 (num -> INTNUM .)
    IF              reduce using rule 57 (num -> INTNUM .)
    WHILE           reduce using rule 57 (num -> INTNUM .)
    FOR             reduce using rule 57 (num -> INTNUM .)
    BREAK           reduce using rule 57 (num -> INTNUM .)
    CONTINUE        reduce using rule 57 (num -> INTNUM .)
    RETURN          reduce using rule 57 (num -> INTNUM .)
    PRINT           reduce using rule 57 (num -> INTNUM .)
    ID              reduce using rule 57 (num -> INTNUM .)


state 50

    (58) num -> FLOAT .

    LT              reduce using rule 58 (num -> FLOAT .)
    GT              reduce using rule 58 (num -> FLOAT .)
    EQ              reduce using rule 58 (num -> FLOAT .)
    NE              reduce using rule 58 (num -> FLOAT .)
    GE              reduce using rule 58 (num -> FLOAT .)
    LE              reduce using rule 58 (num -> FLOAT .)
    +               reduce using rule 58 (num -> FLOAT .)
    -               reduce using rule 58 (num -> FLOAT .)
    *               reduce using rule 58 (num -> FLOAT .)
    /               reduce using rule 58 (num -> FLOAT .)
    DOTADD          reduce using rule 58 (num -> FLOAT .)
    DOTSUB          reduce using rule 58 (num -> FLOAT .)
    DOTMUL          reduce using rule 58 (num -> FLOAT .)
    DOTDIV          reduce using rule 58 (num -> FLOAT .)
    '               reduce using rule 58 (num -> FLOAT .)
    ;               reduce using rule 58 (num -> FLOAT .)
    ,               reduce using rule 58 (num -> FLOAT .)
    )               reduce using rule 58 (num -> FLOAT .)
    ]               reduce using rule 58 (num -> FLOAT .)
    :               reduce using rule 58 (num -> FLOAT .)
    error           reduce using rule 58 (num -> FLOAT .)
    {               reduce using rule 58 (num -> FLOAT .)
    IF              reduce using rule 58 (num -> FLOAT .)
    WHILE           reduce using rule 58 (num -> FLOAT .)
    FOR             reduce using rule 58 (num -> FLOAT .)
    BREAK           reduce using rule 58 (num -> FLOAT .)
    CONTINUE        reduce using rule 58 (num -> FLOAT .)
    RETURN          reduce using rule 58 (num -> FLOAT .)
    PRINT           reduce using rule 58 (num -> FLOAT .)
    ID              reduce using rule 58 (num -> FLOAT .)


state 51

    (59) num -> var .
    (56) var -> var . [ numeric_expression ]

    LT              reduce using rule 59 (num -> var .)
    GT              reduce using rule 59 (num -> var .)
    EQ              reduce using rule 59 (num -> var .)
    NE              reduce using rule 59 (num -> var .)
    GE              reduce using rule 59 (num -> var .)
    LE              reduce using rule 59 (num -> var .)
    +               reduce using rule 59 (num -> var .)
    -               reduce using rule 59 (num -> var .)
    *               reduce using rule 59 (num -> var .)
    /               reduce using rule 59 (num -> var .)
    DOTADD          reduce using rule 59 (num -> var .)
    DOTSUB          reduce using rule 59 (num -> var .)
    DOTMUL          reduce using rule 59 (num -> var .)
    DOTDIV          reduce using rule 59 (num -> var .)
    '               reduce using rule 59 (num -> var .)
    ;               reduce using rule 59 (num -> var .)
    ,               reduce using rule 59 (num -> var .)
    )               reduce using rule 59 (num -> var .)
    ]               reduce using rule 59 (num -> var .)
    :               reduce using rule 59 (num -> var .)
    error           reduce using rule 59 (num -> var .)
    {               reduce using rule 59 (num -> var .)
    IF              reduce using rule 59 (num -> var .)
    WHILE           reduce using rule 59 (num -> var .)
    FOR             reduce using rule 59 (num -> var .)
    BREAK           reduce using rule 59 (num -> var .)
    CONTINUE        reduce using rule 59 (num -> var .)
    RETURN          reduce using rule 59 (num -> var .)
    PRINT           reduce using rule 59 (num -> var .)
    ID              reduce using rule 59 (num -> var .)
    [               shift and go to state 90


state 52

    (30) matrix -> [ . matrix_body ]
    (31) matrix -> [ . ]
    (32) matrix_body -> . vector
    (33) matrix_body -> . matrix_body , vector
    (26) vector -> . [ vector_body ]
    (27) vector -> . [ ]

    ]               shift and go to state 93
    [               shift and go to state 91

    matrix_body                    shift and go to state 92
    vector                         shift and go to state 94

state 53

    (60) unary_op -> negation .

    LT              reduce using rule 60 (unary_op -> negation .)
    GT              reduce using rule 60 (unary_op -> negation .)
    EQ              reduce using rule 60 (unary_op -> negation .)
    NE              reduce using rule 60 (unary_op -> negation .)
    GE              reduce using rule 60 (unary_op -> negation .)
    LE              reduce using rule 60 (unary_op -> negation .)
    +               reduce using rule 60 (unary_op -> negation .)
    -               reduce using rule 60 (unary_op -> negation .)
    *               reduce using rule 60 (unary_op -> negation .)
    /               reduce using rule 60 (unary_op -> negation .)
    DOTADD          reduce using rule 60 (unary_op -> negation .)
    DOTSUB          reduce using rule 60 (unary_op -> negation .)
    DOTMUL          reduce using rule 60 (unary_op -> negation .)
    DOTDIV          reduce using rule 60 (unary_op -> negation .)
    '               reduce using rule 60 (unary_op -> negation .)
    ;               reduce using rule 60 (unary_op -> negation .)
    ,               reduce using rule 60 (unary_op -> negation .)
    )               reduce using rule 60 (unary_op -> negation .)
    ]               reduce using rule 60 (unary_op -> negation .)
    :               reduce using rule 60 (unary_op -> negation .)
    error           reduce using rule 60 (unary_op -> negation .)
    {               reduce using rule 60 (unary_op -> negation .)
    IF              reduce using rule 60 (unary_op -> negation .)
    WHILE           reduce using rule 60 (unary_op -> negation .)
    FOR             reduce using rule 60 (unary_op -> negation .)
    BREAK           reduce using rule 60 (unary_op -> negation .)
    CONTINUE        reduce using rule 60 (unary_op -> negation .)
    RETURN          reduce using rule 60 (unary_op -> negation .)
    PRINT           reduce using rule 60 (unary_op -> negation .)
    ID              reduce using rule 60 (unary_op -> negation .)


state 54

    (61) unary_op -> transposition .

    LT              reduce using rule 61 (unary_op -> transposition .)
    GT              reduce using rule 61 (unary_op -> transposition .)
    EQ              reduce using rule 61 (unary_op -> transposition .)
    NE              reduce using rule 61 (unary_op -> transposition .)
    GE              reduce using rule 61 (unary_op -> transposition .)
    LE              reduce using rule 61 (unary_op -> transposition .)
    +               reduce using rule 61 (unary_op -> transposition .)
    -               reduce using rule 61 (unary_op -> transposition .)
    *               reduce using rule 61 (unary_op -> transposition .)
    /               reduce using rule 61 (unary_op -> transposition .)
    DOTADD          reduce using rule 61 (unary_op -> transposition .)
    DOTSUB          reduce using rule 61 (unary_op -> transposition .)
    DOTMUL          reduce using rule 61 (unary_op -> transposition .)
    DOTDIV          reduce using rule 61 (unary_op -> transposition .)
    '               reduce using rule 61 (unary_op -> transposition .)
    ;               reduce using rule 61 (unary_op -> transposition .)
    ,               reduce using rule 61 (unary_op -> transposition .)
    )               reduce using rule 61 (unary_op -> transposition .)
    ]               reduce using rule 61 (unary_op -> transposition .)
    :               reduce using rule 61 (unary_op -> transposition .)
    error           reduce using rule 61 (unary_op -> transposition .)
    {               reduce using rule 61 (unary_op -> transposition .)
    IF              reduce using rule 61 (unary_op -> transposition .)
    WHILE           reduce using rule 61 (unary_op -> transposition .)
    FOR             reduce using rule 61 (unary_op -> transposition .)
    BREAK           reduce using rule 61 (unary_op -> transposition .)
    CONTINUE        reduce using rule 61 (unary_op -> transposition .)
    RETURN          reduce using rule 61 (unary_op -> transposition .)
    PRINT           reduce using rule 61 (unary_op -> transposition .)
    ID              reduce using rule 61 (unary_op -> transposition .)


state 55

    (35) fun -> fun_name . ( numeric_expression )
    (36) fun -> fun_name . ( error )

    (               shift and go to state 95


state 56

    (37) fun_name -> ZEROS .

    (               reduce using rule 37 (fun_name -> ZEROS .)


state 57

    (38) fun_name -> ONES .

    (               reduce using rule 38 (fun_name -> ONES .)


state 58

    (39) fun_name -> EYE .

    (               reduce using rule 39 (fun_name -> EYE .)


state 59

    (18) print -> PRINT print_body .

    ;               reduce using rule 18 (print -> PRINT print_body .)


state 60

    (19) print_body -> string .
    (21) print_body -> string . , print_body

    ;               reduce using rule 19 (print_body -> string .)
    ,               shift and go to state 96


state 61

    (20) print_body -> expression .
    (22) print_body -> expression . , print_body

    ;               reduce using rule 20 (print_body -> expression .)
    ,               shift and go to state 97


state 62

    (25) string -> STRING .

    ,               reduce using rule 25 (string -> STRING .)
    ;               reduce using rule 25 (string -> STRING .)


state 63

    (56) var -> var [ . numeric_expression ]
    (34) array_range -> var [ . expression , expression ]
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 100
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    var                            shift and go to state 51
    numeric_expression             shift and go to state 98
    expression                     shift and go to state 99
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    comparison_expression          shift and go to state 41
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 64

    (16) block -> { instructions } .

    error           reduce using rule 16 (block -> { instructions } .)
    {               reduce using rule 16 (block -> { instructions } .)
    IF              reduce using rule 16 (block -> { instructions } .)
    WHILE           reduce using rule 16 (block -> { instructions } .)
    FOR             reduce using rule 16 (block -> { instructions } .)
    BREAK           reduce using rule 16 (block -> { instructions } .)
    CONTINUE        reduce using rule 16 (block -> { instructions } .)
    RETURN          reduce using rule 16 (block -> { instructions } .)
    PRINT           reduce using rule 16 (block -> { instructions } .)
    ID              reduce using rule 16 (block -> { instructions } .)
    $end            reduce using rule 16 (block -> { instructions } .)
    }               reduce using rule 16 (block -> { instructions } .)
    ELSE            reduce using rule 16 (block -> { instructions } .)


state 65

    (17) block -> { error } .

    error           reduce using rule 17 (block -> { error } .)
    {               reduce using rule 17 (block -> { error } .)
    IF              reduce using rule 17 (block -> { error } .)
    WHILE           reduce using rule 17 (block -> { error } .)
    FOR             reduce using rule 17 (block -> { error } .)
    BREAK           reduce using rule 17 (block -> { error } .)
    CONTINUE        reduce using rule 17 (block -> { error } .)
    RETURN          reduce using rule 17 (block -> { error } .)
    PRINT           reduce using rule 17 (block -> { error } .)
    ID              reduce using rule 17 (block -> { error } .)
    $end            reduce using rule 17 (block -> { error } .)
    }               reduce using rule 17 (block -> { error } .)
    ELSE            reduce using rule 17 (block -> { error } .)


state 66

    (44) conditional -> IF ( expression . ) instruction
    (45) conditional -> IF ( expression . ) instruction ELSE instruction

    )               shift and go to state 101


state 67

    (42) while -> WHILE ( expression . ) instruction

    )               shift and go to state 102


state 68

    (43) for -> FOR ID = . numeric_expression : numeric_expression instruction
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 103
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 69

    (48) assignment -> assignment_lhs assignment_operator expression .

    ;               reduce using rule 48 (assignment -> assignment_lhs assignment_operator expression .)


state 70

    (49) assignment -> assignment_lhs = string .

    ;               reduce using rule 49 (assignment -> assignment_lhs = string .)


state 71

    (77) comparison_expression -> numeric_expression LT . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 104
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 72

    (78) comparison_expression -> numeric_expression GT . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 105
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 73

    (79) comparison_expression -> numeric_expression EQ . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 106
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 74

    (80) comparison_expression -> numeric_expression NE . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 107
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 75

    (81) comparison_expression -> numeric_expression GE . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 108
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 76

    (82) comparison_expression -> numeric_expression LE . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 109
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 77

    (69) numeric_expression -> numeric_expression + . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 110
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 78

    (70) numeric_expression -> numeric_expression - . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 111
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 79

    (71) numeric_expression -> numeric_expression * . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 112
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 80

    (72) numeric_expression -> numeric_expression / . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 113
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 81

    (73) numeric_expression -> numeric_expression DOTADD . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 114
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 82

    (74) numeric_expression -> numeric_expression DOTSUB . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 115
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 83

    (75) numeric_expression -> numeric_expression DOTMUL . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 116
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 84

    (76) numeric_expression -> numeric_expression DOTDIV . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 117
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 85

    (63) transposition -> numeric_expression ' .

    LT              reduce using rule 63 (transposition -> numeric_expression ' .)
    GT              reduce using rule 63 (transposition -> numeric_expression ' .)
    EQ              reduce using rule 63 (transposition -> numeric_expression ' .)
    NE              reduce using rule 63 (transposition -> numeric_expression ' .)
    GE              reduce using rule 63 (transposition -> numeric_expression ' .)
    LE              reduce using rule 63 (transposition -> numeric_expression ' .)
    +               reduce using rule 63 (transposition -> numeric_expression ' .)
    -               reduce using rule 63 (transposition -> numeric_expression ' .)
    *               reduce using rule 63 (transposition -> numeric_expression ' .)
    /               reduce using rule 63 (transposition -> numeric_expression ' .)
    DOTADD          reduce using rule 63 (transposition -> numeric_expression ' .)
    DOTSUB          reduce using rule 63 (transposition -> numeric_expression ' .)
    DOTMUL          reduce using rule 63 (transposition -> numeric_expression ' .)
    DOTDIV          reduce using rule 63 (transposition -> numeric_expression ' .)
    '               reduce using rule 63 (transposition -> numeric_expression ' .)
    ;               reduce using rule 63 (transposition -> numeric_expression ' .)
    ,               reduce using rule 63 (transposition -> numeric_expression ' .)
    )               reduce using rule 63 (transposition -> numeric_expression ' .)
    ]               reduce using rule 63 (transposition -> numeric_expression ' .)
    :               reduce using rule 63 (transposition -> numeric_expression ' .)
    error           reduce using rule 63 (transposition -> numeric_expression ' .)
    {               reduce using rule 63 (transposition -> numeric_expression ' .)
    IF              reduce using rule 63 (transposition -> numeric_expression ' .)
    WHILE           reduce using rule 63 (transposition -> numeric_expression ' .)
    FOR             reduce using rule 63 (transposition -> numeric_expression ' .)
    BREAK           reduce using rule 63 (transposition -> numeric_expression ' .)
    CONTINUE        reduce using rule 63 (transposition -> numeric_expression ' .)
    RETURN          reduce using rule 63 (transposition -> numeric_expression ' .)
    PRINT           reduce using rule 63 (transposition -> numeric_expression ' .)
    ID              reduce using rule 63 (transposition -> numeric_expression ' .)


state 86

    (83) comparison_expression -> ( comparison_expression . )

    )               shift and go to state 118


state 87

    (68) numeric_expression -> ( numeric_expression . )
    (77) comparison_expression -> numeric_expression . LT numeric_expression
    (78) comparison_expression -> numeric_expression . GT numeric_expression
    (79) comparison_expression -> numeric_expression . EQ numeric_expression
    (80) comparison_expression -> numeric_expression . NE numeric_expression
    (81) comparison_expression -> numeric_expression . GE numeric_expression
    (82) comparison_expression -> numeric_expression . LE numeric_expression
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    )               shift and go to state 119
    LT              shift and go to state 71
    GT              shift and go to state 72
    EQ              shift and go to state 73
    NE              shift and go to state 74
    GE              shift and go to state 75
    LE              shift and go to state 76
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 88

    (62) negation -> - numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 62 (negation -> - numeric_expression .)
    GT              reduce using rule 62 (negation -> - numeric_expression .)
    EQ              reduce using rule 62 (negation -> - numeric_expression .)
    NE              reduce using rule 62 (negation -> - numeric_expression .)
    GE              reduce using rule 62 (negation -> - numeric_expression .)
    LE              reduce using rule 62 (negation -> - numeric_expression .)
    +               reduce using rule 62 (negation -> - numeric_expression .)
    -               reduce using rule 62 (negation -> - numeric_expression .)
    *               reduce using rule 62 (negation -> - numeric_expression .)
    /               reduce using rule 62 (negation -> - numeric_expression .)
    DOTADD          reduce using rule 62 (negation -> - numeric_expression .)
    DOTSUB          reduce using rule 62 (negation -> - numeric_expression .)
    DOTMUL          reduce using rule 62 (negation -> - numeric_expression .)
    DOTDIV          reduce using rule 62 (negation -> - numeric_expression .)
    ;               reduce using rule 62 (negation -> - numeric_expression .)
    ,               reduce using rule 62 (negation -> - numeric_expression .)
    )               reduce using rule 62 (negation -> - numeric_expression .)
    ]               reduce using rule 62 (negation -> - numeric_expression .)
    :               reduce using rule 62 (negation -> - numeric_expression .)
    error           reduce using rule 62 (negation -> - numeric_expression .)
    {               reduce using rule 62 (negation -> - numeric_expression .)
    IF              reduce using rule 62 (negation -> - numeric_expression .)
    WHILE           reduce using rule 62 (negation -> - numeric_expression .)
    FOR             reduce using rule 62 (negation -> - numeric_expression .)
    BREAK           reduce using rule 62 (negation -> - numeric_expression .)
    CONTINUE        reduce using rule 62 (negation -> - numeric_expression .)
    RETURN          reduce using rule 62 (negation -> - numeric_expression .)
    PRINT           reduce using rule 62 (negation -> - numeric_expression .)
    ID              reduce using rule 62 (negation -> - numeric_expression .)
    '               shift and go to state 85

  ! '               [ reduce using rule 62 (negation -> - numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! *               [ shift and go to state 79 ]
  ! /               [ shift and go to state 80 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 83 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 89

    (68) numeric_expression -> ( . numeric_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 120
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 90

    (56) var -> var [ . numeric_expression ]
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    var                            shift and go to state 51
    numeric_expression             shift and go to state 121
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 91

    (26) vector -> [ . vector_body ]
    (27) vector -> [ . ]
    (28) vector_body -> . numeric_expression
    (29) vector_body -> . vector_body , numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    ]               shift and go to state 123
    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    vector_body                    shift and go to state 122
    numeric_expression             shift and go to state 124
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 92

    (30) matrix -> [ matrix_body . ]
    (33) matrix_body -> matrix_body . , vector

    ]               shift and go to state 125
    ,               shift and go to state 126


state 93

    (31) matrix -> [ ] .

    LT              reduce using rule 31 (matrix -> [ ] .)
    GT              reduce using rule 31 (matrix -> [ ] .)
    EQ              reduce using rule 31 (matrix -> [ ] .)
    NE              reduce using rule 31 (matrix -> [ ] .)
    GE              reduce using rule 31 (matrix -> [ ] .)
    LE              reduce using rule 31 (matrix -> [ ] .)
    +               reduce using rule 31 (matrix -> [ ] .)
    -               reduce using rule 31 (matrix -> [ ] .)
    *               reduce using rule 31 (matrix -> [ ] .)
    /               reduce using rule 31 (matrix -> [ ] .)
    DOTADD          reduce using rule 31 (matrix -> [ ] .)
    DOTSUB          reduce using rule 31 (matrix -> [ ] .)
    DOTMUL          reduce using rule 31 (matrix -> [ ] .)
    DOTDIV          reduce using rule 31 (matrix -> [ ] .)
    '               reduce using rule 31 (matrix -> [ ] .)
    ;               reduce using rule 31 (matrix -> [ ] .)
    ,               reduce using rule 31 (matrix -> [ ] .)
    )               reduce using rule 31 (matrix -> [ ] .)
    ]               reduce using rule 31 (matrix -> [ ] .)
    :               reduce using rule 31 (matrix -> [ ] .)
    error           reduce using rule 31 (matrix -> [ ] .)
    {               reduce using rule 31 (matrix -> [ ] .)
    IF              reduce using rule 31 (matrix -> [ ] .)
    WHILE           reduce using rule 31 (matrix -> [ ] .)
    FOR             reduce using rule 31 (matrix -> [ ] .)
    BREAK           reduce using rule 31 (matrix -> [ ] .)
    CONTINUE        reduce using rule 31 (matrix -> [ ] .)
    RETURN          reduce using rule 31 (matrix -> [ ] .)
    PRINT           reduce using rule 31 (matrix -> [ ] .)
    ID              reduce using rule 31 (matrix -> [ ] .)


state 94

    (32) matrix_body -> vector .

    ]               reduce using rule 32 (matrix_body -> vector .)
    ,               reduce using rule 32 (matrix_body -> vector .)


state 95

    (35) fun -> fun_name ( . numeric_expression )
    (36) fun -> fun_name ( . error )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    error           shift and go to state 128
    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    fun_name                       shift and go to state 55
    numeric_expression             shift and go to state 127
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54

state 96

    (21) print_body -> string , . print_body
    (19) print_body -> . string
    (20) print_body -> . expression
    (21) print_body -> . string , print_body
    (22) print_body -> . expression , print_body
    (25) string -> . STRING
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    STRING          shift and go to state 62
    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    string                         shift and go to state 60
    print_body                     shift and go to state 129
    expression                     shift and go to state 61
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 97

    (22) print_body -> expression , . print_body
    (19) print_body -> . string
    (20) print_body -> . expression
    (21) print_body -> . string , print_body
    (22) print_body -> . expression , print_body
    (25) string -> . STRING
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    STRING          shift and go to state 62
    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    expression                     shift and go to state 61
    print_body                     shift and go to state 130
    string                         shift and go to state 60
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 98

    (56) var -> var [ numeric_expression . ]
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (15) expression -> numeric_expression .
    (77) comparison_expression -> numeric_expression . LT numeric_expression
    (78) comparison_expression -> numeric_expression . GT numeric_expression
    (79) comparison_expression -> numeric_expression . EQ numeric_expression
    (80) comparison_expression -> numeric_expression . NE numeric_expression
    (81) comparison_expression -> numeric_expression . GE numeric_expression
    (82) comparison_expression -> numeric_expression . LE numeric_expression
    (63) transposition -> numeric_expression . '

    ]               shift and go to state 131
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    ,               reduce using rule 15 (expression -> numeric_expression .)
    LT              shift and go to state 71
    GT              shift and go to state 72
    EQ              shift and go to state 73
    NE              shift and go to state 74
    GE              shift and go to state 75
    LE              shift and go to state 76
    '               shift and go to state 85


state 99

    (34) array_range -> var [ expression . , expression ]

    ,               shift and go to state 132


state 100

    (68) numeric_expression -> ( . numeric_expression )
    (83) comparison_expression -> ( . comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 100
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 133
    comparison_expression          shift and go to state 86
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 101

    (44) conditional -> IF ( expression ) . instruction
    (45) conditional -> IF ( expression ) . instruction ELSE instruction
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 134
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 102

    (42) while -> WHILE ( expression ) . instruction
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 135
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 103

    (43) for -> FOR ID = numeric_expression . : numeric_expression instruction
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    :               shift and go to state 136
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 104

    (77) comparison_expression -> numeric_expression LT numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 77 (comparison_expression -> numeric_expression LT numeric_expression .)
    ,               reduce using rule 77 (comparison_expression -> numeric_expression LT numeric_expression .)
    )               reduce using rule 77 (comparison_expression -> numeric_expression LT numeric_expression .)
    ]               reduce using rule 77 (comparison_expression -> numeric_expression LT numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 105

    (78) comparison_expression -> numeric_expression GT numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 78 (comparison_expression -> numeric_expression GT numeric_expression .)
    ,               reduce using rule 78 (comparison_expression -> numeric_expression GT numeric_expression .)
    )               reduce using rule 78 (comparison_expression -> numeric_expression GT numeric_expression .)
    ]               reduce using rule 78 (comparison_expression -> numeric_expression GT numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 106

    (79) comparison_expression -> numeric_expression EQ numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 79 (comparison_expression -> numeric_expression EQ numeric_expression .)
    ,               reduce using rule 79 (comparison_expression -> numeric_expression EQ numeric_expression .)
    )               reduce using rule 79 (comparison_expression -> numeric_expression EQ numeric_expression .)
    ]               reduce using rule 79 (comparison_expression -> numeric_expression EQ numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 107

    (80) comparison_expression -> numeric_expression NE numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 80 (comparison_expression -> numeric_expression NE numeric_expression .)
    ,               reduce using rule 80 (comparison_expression -> numeric_expression NE numeric_expression .)
    )               reduce using rule 80 (comparison_expression -> numeric_expression NE numeric_expression .)
    ]               reduce using rule 80 (comparison_expression -> numeric_expression NE numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 108

    (81) comparison_expression -> numeric_expression GE numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    ,               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    )               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    ]               reduce using rule 81 (comparison_expression -> numeric_expression GE numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 109

    (82) comparison_expression -> numeric_expression LE numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ;               reduce using rule 82 (comparison_expression -> numeric_expression LE numeric_expression .)
    ,               reduce using rule 82 (comparison_expression -> numeric_expression LE numeric_expression .)
    )               reduce using rule 82 (comparison_expression -> numeric_expression LE numeric_expression .)
    ]               reduce using rule 82 (comparison_expression -> numeric_expression LE numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 110

    (69) numeric_expression -> numeric_expression + numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    GT              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    EQ              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    NE              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    GE              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    LE              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    +               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    -               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    DOTADD          reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    DOTSUB          reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    ;               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    ,               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    )               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    ]               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    :               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    error           reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    {               reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    IF              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    WHILE           reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    FOR             reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    BREAK           reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    CONTINUE        reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    RETURN          reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    PRINT           reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    ID              reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .)
    *               shift and go to state 79
    /               shift and go to state 80
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85

  ! *               [ reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! /               [ reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! '               [ reduce using rule 69 (numeric_expression -> numeric_expression + numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]


state 111

    (70) numeric_expression -> numeric_expression - numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    GT              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    EQ              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    NE              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    GE              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    LE              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    +               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    -               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    DOTADD          reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    DOTSUB          reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    ;               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    ,               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    )               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    ]               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    :               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    error           reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    {               reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    IF              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    WHILE           reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    FOR             reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    BREAK           reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    CONTINUE        reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    RETURN          reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    PRINT           reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    ID              reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .)
    *               shift and go to state 79
    /               shift and go to state 80
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85

  ! *               [ reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! /               [ reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! '               [ reduce using rule 70 (numeric_expression -> numeric_expression - numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]


state 112

    (71) numeric_expression -> numeric_expression * numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    GT              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    EQ              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    NE              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    GE              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    LE              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    +               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    -               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    *               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    /               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTADD          reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTSUB          reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTMUL          reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    DOTDIV          reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    ;               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    ,               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    )               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    ]               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    :               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    error           reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    {               reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    IF              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    WHILE           reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    FOR             reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    BREAK           reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    CONTINUE        reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    RETURN          reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    PRINT           reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    ID              reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .)
    '               shift and go to state 85

  ! '               [ reduce using rule 71 (numeric_expression -> numeric_expression * numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! *               [ shift and go to state 79 ]
  ! /               [ shift and go to state 80 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 83 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 113

    (72) numeric_expression -> numeric_expression / numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    GT              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    EQ              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    NE              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    GE              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    LE              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    +               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    -               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    *               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    /               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTADD          reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTSUB          reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTMUL          reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    DOTDIV          reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    ;               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    ,               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    )               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    ]               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    :               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    error           reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    {               reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    IF              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    WHILE           reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    FOR             reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    BREAK           reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    CONTINUE        reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    RETURN          reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    PRINT           reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    ID              reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .)
    '               shift and go to state 85

  ! '               [ reduce using rule 72 (numeric_expression -> numeric_expression / numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! *               [ shift and go to state 79 ]
  ! /               [ shift and go to state 80 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 83 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 114

    (73) numeric_expression -> numeric_expression DOTADD numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    GT              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    EQ              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    NE              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    GE              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    LE              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    +               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    -               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    DOTADD          reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    DOTSUB          reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ;               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ,               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    )               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ]               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    :               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    error           reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    {               reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    IF              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    WHILE           reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    FOR             reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    BREAK           reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    CONTINUE        reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    RETURN          reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    PRINT           reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    ID              reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .)
    *               shift and go to state 79
    /               shift and go to state 80
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85

  ! *               [ reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! /               [ reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! '               [ reduce using rule 73 (numeric_expression -> numeric_expression DOTADD numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]


state 115

    (74) numeric_expression -> numeric_expression DOTSUB numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    GT              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    EQ              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    NE              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    GE              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    LE              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    +               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    -               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    DOTADD          reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    DOTSUB          reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ;               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ,               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    )               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ]               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    :               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    error           reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    {               reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    IF              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    WHILE           reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    FOR             reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    BREAK           reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    CONTINUE        reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    RETURN          reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    PRINT           reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    ID              reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .)
    *               shift and go to state 79
    /               shift and go to state 80
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85

  ! *               [ reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! /               [ reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! DOTMUL          [ reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! DOTDIV          [ reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! '               [ reduce using rule 74 (numeric_expression -> numeric_expression DOTSUB numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]


state 116

    (75) numeric_expression -> numeric_expression DOTMUL numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    GT              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    EQ              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    NE              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    GE              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    LE              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    +               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    -               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    *               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    /               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTADD          reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTSUB          reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTMUL          reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    DOTDIV          reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ;               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ,               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    )               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ]               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    :               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    error           reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    {               reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    IF              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    WHILE           reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    FOR             reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    BREAK           reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    CONTINUE        reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    RETURN          reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    PRINT           reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    ID              reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .)
    '               shift and go to state 85

  ! '               [ reduce using rule 75 (numeric_expression -> numeric_expression DOTMUL numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! *               [ shift and go to state 79 ]
  ! /               [ shift and go to state 80 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 83 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 117

    (76) numeric_expression -> numeric_expression DOTDIV numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    LT              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    GT              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    EQ              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    NE              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    GE              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    LE              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    +               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    -               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    *               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    /               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTADD          reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTSUB          reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTMUL          reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    DOTDIV          reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ;               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ,               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    )               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ]               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    :               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    error           reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    {               reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    IF              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    WHILE           reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    FOR             reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    BREAK           reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    CONTINUE        reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    RETURN          reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    PRINT           reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    ID              reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .)
    '               shift and go to state 85

  ! '               [ reduce using rule 76 (numeric_expression -> numeric_expression DOTDIV numeric_expression .) ]
  ! +               [ shift and go to state 77 ]
  ! -               [ shift and go to state 78 ]
  ! *               [ shift and go to state 79 ]
  ! /               [ shift and go to state 80 ]
  ! DOTADD          [ shift and go to state 81 ]
  ! DOTSUB          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 83 ]
  ! DOTDIV          [ shift and go to state 84 ]


state 118

    (83) comparison_expression -> ( comparison_expression ) .

    ;               reduce using rule 83 (comparison_expression -> ( comparison_expression ) .)
    ,               reduce using rule 83 (comparison_expression -> ( comparison_expression ) .)
    )               reduce using rule 83 (comparison_expression -> ( comparison_expression ) .)
    ]               reduce using rule 83 (comparison_expression -> ( comparison_expression ) .)


state 119

    (68) numeric_expression -> ( numeric_expression ) .

    LT              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    GT              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    EQ              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    NE              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    GE              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    LE              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    +               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    -               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    *               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    /               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    DOTADD          reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    DOTSUB          reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    DOTMUL          reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    DOTDIV          reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    '               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    ;               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    ,               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    )               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    ]               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    :               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    error           reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    {               reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    IF              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    WHILE           reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    FOR             reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    BREAK           reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    CONTINUE        reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    RETURN          reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    PRINT           reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)
    ID              reduce using rule 68 (numeric_expression -> ( numeric_expression ) .)


state 120

    (68) numeric_expression -> ( numeric_expression . )
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    )               shift and go to state 119
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 121

    (56) var -> var [ numeric_expression . ]
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ]               shift and go to state 131
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 122

    (26) vector -> [ vector_body . ]
    (29) vector_body -> vector_body . , numeric_expression

    ]               shift and go to state 137
    ,               shift and go to state 138


state 123

    (27) vector -> [ ] .

    ]               reduce using rule 27 (vector -> [ ] .)
    ,               reduce using rule 27 (vector -> [ ] .)


state 124

    (28) vector_body -> numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ]               reduce using rule 28 (vector_body -> numeric_expression .)
    ,               reduce using rule 28 (vector_body -> numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 125

    (30) matrix -> [ matrix_body ] .

    LT              reduce using rule 30 (matrix -> [ matrix_body ] .)
    GT              reduce using rule 30 (matrix -> [ matrix_body ] .)
    EQ              reduce using rule 30 (matrix -> [ matrix_body ] .)
    NE              reduce using rule 30 (matrix -> [ matrix_body ] .)
    GE              reduce using rule 30 (matrix -> [ matrix_body ] .)
    LE              reduce using rule 30 (matrix -> [ matrix_body ] .)
    +               reduce using rule 30 (matrix -> [ matrix_body ] .)
    -               reduce using rule 30 (matrix -> [ matrix_body ] .)
    *               reduce using rule 30 (matrix -> [ matrix_body ] .)
    /               reduce using rule 30 (matrix -> [ matrix_body ] .)
    DOTADD          reduce using rule 30 (matrix -> [ matrix_body ] .)
    DOTSUB          reduce using rule 30 (matrix -> [ matrix_body ] .)
    DOTMUL          reduce using rule 30 (matrix -> [ matrix_body ] .)
    DOTDIV          reduce using rule 30 (matrix -> [ matrix_body ] .)
    '               reduce using rule 30 (matrix -> [ matrix_body ] .)
    ;               reduce using rule 30 (matrix -> [ matrix_body ] .)
    ,               reduce using rule 30 (matrix -> [ matrix_body ] .)
    )               reduce using rule 30 (matrix -> [ matrix_body ] .)
    ]               reduce using rule 30 (matrix -> [ matrix_body ] .)
    :               reduce using rule 30 (matrix -> [ matrix_body ] .)
    error           reduce using rule 30 (matrix -> [ matrix_body ] .)
    {               reduce using rule 30 (matrix -> [ matrix_body ] .)
    IF              reduce using rule 30 (matrix -> [ matrix_body ] .)
    WHILE           reduce using rule 30 (matrix -> [ matrix_body ] .)
    FOR             reduce using rule 30 (matrix -> [ matrix_body ] .)
    BREAK           reduce using rule 30 (matrix -> [ matrix_body ] .)
    CONTINUE        reduce using rule 30 (matrix -> [ matrix_body ] .)
    RETURN          reduce using rule 30 (matrix -> [ matrix_body ] .)
    PRINT           reduce using rule 30 (matrix -> [ matrix_body ] .)
    ID              reduce using rule 30 (matrix -> [ matrix_body ] .)


state 126

    (33) matrix_body -> matrix_body , . vector
    (26) vector -> . [ vector_body ]
    (27) vector -> . [ ]

    [               shift and go to state 91

    vector                         shift and go to state 139

state 127

    (35) fun -> fun_name ( numeric_expression . )
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    )               shift and go to state 140
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 128

    (36) fun -> fun_name ( error . )

    )               shift and go to state 141


state 129

    (21) print_body -> string , print_body .

    ;               reduce using rule 21 (print_body -> string , print_body .)


state 130

    (22) print_body -> expression , print_body .

    ;               reduce using rule 22 (print_body -> expression , print_body .)


state 131

    (56) var -> var [ numeric_expression ] .

    [               reduce using rule 56 (var -> var [ numeric_expression ] .)
    =               reduce using rule 56 (var -> var [ numeric_expression ] .)
    ADDASSIGN       reduce using rule 56 (var -> var [ numeric_expression ] .)
    SUBASSIGN       reduce using rule 56 (var -> var [ numeric_expression ] .)
    MULASSIGN       reduce using rule 56 (var -> var [ numeric_expression ] .)
    DIVASSIGN       reduce using rule 56 (var -> var [ numeric_expression ] .)
    LT              reduce using rule 56 (var -> var [ numeric_expression ] .)
    GT              reduce using rule 56 (var -> var [ numeric_expression ] .)
    EQ              reduce using rule 56 (var -> var [ numeric_expression ] .)
    NE              reduce using rule 56 (var -> var [ numeric_expression ] .)
    GE              reduce using rule 56 (var -> var [ numeric_expression ] .)
    LE              reduce using rule 56 (var -> var [ numeric_expression ] .)
    +               reduce using rule 56 (var -> var [ numeric_expression ] .)
    -               reduce using rule 56 (var -> var [ numeric_expression ] .)
    *               reduce using rule 56 (var -> var [ numeric_expression ] .)
    /               reduce using rule 56 (var -> var [ numeric_expression ] .)
    DOTADD          reduce using rule 56 (var -> var [ numeric_expression ] .)
    DOTSUB          reduce using rule 56 (var -> var [ numeric_expression ] .)
    DOTMUL          reduce using rule 56 (var -> var [ numeric_expression ] .)
    DOTDIV          reduce using rule 56 (var -> var [ numeric_expression ] .)
    '               reduce using rule 56 (var -> var [ numeric_expression ] .)
    ;               reduce using rule 56 (var -> var [ numeric_expression ] .)
    ,               reduce using rule 56 (var -> var [ numeric_expression ] .)
    )               reduce using rule 56 (var -> var [ numeric_expression ] .)
    ]               reduce using rule 56 (var -> var [ numeric_expression ] .)
    :               reduce using rule 56 (var -> var [ numeric_expression ] .)
    error           reduce using rule 56 (var -> var [ numeric_expression ] .)
    {               reduce using rule 56 (var -> var [ numeric_expression ] .)
    IF              reduce using rule 56 (var -> var [ numeric_expression ] .)
    WHILE           reduce using rule 56 (var -> var [ numeric_expression ] .)
    FOR             reduce using rule 56 (var -> var [ numeric_expression ] .)
    BREAK           reduce using rule 56 (var -> var [ numeric_expression ] .)
    CONTINUE        reduce using rule 56 (var -> var [ numeric_expression ] .)
    RETURN          reduce using rule 56 (var -> var [ numeric_expression ] .)
    PRINT           reduce using rule 56 (var -> var [ numeric_expression ] .)
    ID              reduce using rule 56 (var -> var [ numeric_expression ] .)


state 132

    (34) array_range -> var [ expression , . expression ]
    (14) expression -> . comparison_expression
    (15) expression -> . numeric_expression
    (77) comparison_expression -> . numeric_expression LT numeric_expression
    (78) comparison_expression -> . numeric_expression GT numeric_expression
    (79) comparison_expression -> . numeric_expression EQ numeric_expression
    (80) comparison_expression -> . numeric_expression NE numeric_expression
    (81) comparison_expression -> . numeric_expression GE numeric_expression
    (82) comparison_expression -> . numeric_expression LE numeric_expression
    (83) comparison_expression -> . ( comparison_expression )
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 43
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    var                            shift and go to state 51
    expression                     shift and go to state 142
    comparison_expression          shift and go to state 41
    numeric_expression             shift and go to state 42
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 133

    (68) numeric_expression -> ( numeric_expression . )
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (77) comparison_expression -> numeric_expression . LT numeric_expression
    (78) comparison_expression -> numeric_expression . GT numeric_expression
    (79) comparison_expression -> numeric_expression . EQ numeric_expression
    (80) comparison_expression -> numeric_expression . NE numeric_expression
    (81) comparison_expression -> numeric_expression . GE numeric_expression
    (82) comparison_expression -> numeric_expression . LE numeric_expression
    (63) transposition -> numeric_expression . '

    )               shift and go to state 119
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    LT              shift and go to state 71
    GT              shift and go to state 72
    EQ              shift and go to state 73
    NE              shift and go to state 74
    GE              shift and go to state 75
    LE              shift and go to state 76
    '               shift and go to state 85


state 134

    (44) conditional -> IF ( expression ) instruction .
    (45) conditional -> IF ( expression ) instruction . ELSE instruction

    error           reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    {               reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    IF              reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    WHILE           reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    FOR             reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    BREAK           reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    RETURN          reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    PRINT           reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    ID              reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    $end            reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    }               reduce using rule 44 (conditional -> IF ( expression ) instruction .)
    ELSE            reduce using rule 44 (conditional -> IF ( expression ) instruction .)

  ! ELSE            [ shift and go to state 143 ]


state 135

    (42) while -> WHILE ( expression ) instruction .

    error           reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    {               reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    IF              reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    ID              reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    $end            reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    }               reduce using rule 42 (while -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 42 (while -> WHILE ( expression ) instruction .)


state 136

    (43) for -> FOR ID = numeric_expression : . numeric_expression instruction
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 144
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 137

    (26) vector -> [ vector_body ] .

    ]               reduce using rule 26 (vector -> [ vector_body ] .)
    ,               reduce using rule 26 (vector -> [ vector_body ] .)


state 138

    (29) vector_body -> vector_body , . numeric_expression
    (64) numeric_expression -> . num
    (65) numeric_expression -> . matrix
    (66) numeric_expression -> . unary_op
    (67) numeric_expression -> . fun
    (68) numeric_expression -> . ( numeric_expression )
    (69) numeric_expression -> . numeric_expression + numeric_expression
    (70) numeric_expression -> . numeric_expression - numeric_expression
    (71) numeric_expression -> . numeric_expression * numeric_expression
    (72) numeric_expression -> . numeric_expression / numeric_expression
    (73) numeric_expression -> . numeric_expression DOTADD numeric_expression
    (74) numeric_expression -> . numeric_expression DOTSUB numeric_expression
    (75) numeric_expression -> . numeric_expression DOTMUL numeric_expression
    (76) numeric_expression -> . numeric_expression DOTDIV numeric_expression
    (57) num -> . INTNUM
    (58) num -> . FLOAT
    (59) num -> . var
    (30) matrix -> . [ matrix_body ]
    (31) matrix -> . [ ]
    (60) unary_op -> . negation
    (61) unary_op -> . transposition
    (35) fun -> . fun_name ( numeric_expression )
    (36) fun -> . fun_name ( error )
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (62) negation -> . - numeric_expression
    (63) transposition -> . numeric_expression '
    (37) fun_name -> . ZEROS
    (38) fun_name -> . ONES
    (39) fun_name -> . EYE

    (               shift and go to state 89
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 50
    [               shift and go to state 52
    ID              shift and go to state 18
    -               shift and go to state 48
    ZEROS           shift and go to state 56
    ONES            shift and go to state 57
    EYE             shift and go to state 58

    numeric_expression             shift and go to state 145
    num                            shift and go to state 44
    matrix                         shift and go to state 45
    unary_op                       shift and go to state 46
    fun                            shift and go to state 47
    var                            shift and go to state 51
    negation                       shift and go to state 53
    transposition                  shift and go to state 54
    fun_name                       shift and go to state 55

state 139

    (33) matrix_body -> matrix_body , vector .

    ]               reduce using rule 33 (matrix_body -> matrix_body , vector .)
    ,               reduce using rule 33 (matrix_body -> matrix_body , vector .)


state 140

    (35) fun -> fun_name ( numeric_expression ) .

    LT              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    GT              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    EQ              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    NE              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    GE              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    LE              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    +               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    -               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    *               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    /               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    DOTADD          reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    DOTSUB          reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    DOTMUL          reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    DOTDIV          reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    '               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    ;               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    ,               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    )               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    ]               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    :               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    error           reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    {               reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    IF              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    WHILE           reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    FOR             reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    BREAK           reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    CONTINUE        reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    RETURN          reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    PRINT           reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)
    ID              reduce using rule 35 (fun -> fun_name ( numeric_expression ) .)


state 141

    (36) fun -> fun_name ( error ) .

    LT              reduce using rule 36 (fun -> fun_name ( error ) .)
    GT              reduce using rule 36 (fun -> fun_name ( error ) .)
    EQ              reduce using rule 36 (fun -> fun_name ( error ) .)
    NE              reduce using rule 36 (fun -> fun_name ( error ) .)
    GE              reduce using rule 36 (fun -> fun_name ( error ) .)
    LE              reduce using rule 36 (fun -> fun_name ( error ) .)
    +               reduce using rule 36 (fun -> fun_name ( error ) .)
    -               reduce using rule 36 (fun -> fun_name ( error ) .)
    *               reduce using rule 36 (fun -> fun_name ( error ) .)
    /               reduce using rule 36 (fun -> fun_name ( error ) .)
    DOTADD          reduce using rule 36 (fun -> fun_name ( error ) .)
    DOTSUB          reduce using rule 36 (fun -> fun_name ( error ) .)
    DOTMUL          reduce using rule 36 (fun -> fun_name ( error ) .)
    DOTDIV          reduce using rule 36 (fun -> fun_name ( error ) .)
    '               reduce using rule 36 (fun -> fun_name ( error ) .)
    ;               reduce using rule 36 (fun -> fun_name ( error ) .)
    ,               reduce using rule 36 (fun -> fun_name ( error ) .)
    )               reduce using rule 36 (fun -> fun_name ( error ) .)
    ]               reduce using rule 36 (fun -> fun_name ( error ) .)
    :               reduce using rule 36 (fun -> fun_name ( error ) .)
    error           reduce using rule 36 (fun -> fun_name ( error ) .)
    {               reduce using rule 36 (fun -> fun_name ( error ) .)
    IF              reduce using rule 36 (fun -> fun_name ( error ) .)
    WHILE           reduce using rule 36 (fun -> fun_name ( error ) .)
    FOR             reduce using rule 36 (fun -> fun_name ( error ) .)
    BREAK           reduce using rule 36 (fun -> fun_name ( error ) .)
    CONTINUE        reduce using rule 36 (fun -> fun_name ( error ) .)
    RETURN          reduce using rule 36 (fun -> fun_name ( error ) .)
    PRINT           reduce using rule 36 (fun -> fun_name ( error ) .)
    ID              reduce using rule 36 (fun -> fun_name ( error ) .)


state 142

    (34) array_range -> var [ expression , expression . ]

    ]               shift and go to state 146


state 143

    (45) conditional -> IF ( expression ) instruction ELSE . instruction
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 147
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 144

    (43) for -> FOR ID = numeric_expression : numeric_expression . instruction
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '
    (3) instruction -> . block
    (4) instruction -> . conditional
    (5) instruction -> . loop
    (6) instruction -> . statement ;
    (7) instruction -> . error ;
    (16) block -> . { instructions }
    (17) block -> . { error }
    (44) conditional -> . IF ( expression ) instruction
    (45) conditional -> . IF ( expression ) instruction ELSE instruction
    (40) loop -> . while
    (41) loop -> . for
    (8) statement -> . assignment
    (9) statement -> . flow_keyword
    (10) statement -> . return
    (11) statement -> . print
    (42) while -> . WHILE ( expression ) instruction
    (43) for -> . FOR ID = numeric_expression : numeric_expression instruction
    (48) assignment -> . assignment_lhs assignment_operator expression
    (49) assignment -> . assignment_lhs = string
    (12) flow_keyword -> . BREAK
    (13) flow_keyword -> . CONTINUE
    (23) return -> . RETURN expression
    (24) return -> . RETURN
    (18) print -> . PRINT print_body
    (46) assignment_lhs -> . var
    (47) assignment_lhs -> . array_range
    (55) var -> . ID
    (56) var -> . var [ numeric_expression ]
    (34) array_range -> . var [ expression , expression ]

    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85
    error           shift and go to state 7
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    ID              shift and go to state 18

    instruction                    shift and go to state 148
    block                          shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    statement                      shift and go to state 6
    while                          shift and go to state 10
    for                            shift and go to state 11
    assignment                     shift and go to state 12
    flow_keyword                   shift and go to state 13
    return                         shift and go to state 14
    print                          shift and go to state 15
    assignment_lhs                 shift and go to state 19
    var                            shift and go to state 24
    array_range                    shift and go to state 25

state 145

    (29) vector_body -> vector_body , numeric_expression .
    (69) numeric_expression -> numeric_expression . + numeric_expression
    (70) numeric_expression -> numeric_expression . - numeric_expression
    (71) numeric_expression -> numeric_expression . * numeric_expression
    (72) numeric_expression -> numeric_expression . / numeric_expression
    (73) numeric_expression -> numeric_expression . DOTADD numeric_expression
    (74) numeric_expression -> numeric_expression . DOTSUB numeric_expression
    (75) numeric_expression -> numeric_expression . DOTMUL numeric_expression
    (76) numeric_expression -> numeric_expression . DOTDIV numeric_expression
    (63) transposition -> numeric_expression . '

    ]               reduce using rule 29 (vector_body -> vector_body , numeric_expression .)
    ,               reduce using rule 29 (vector_body -> vector_body , numeric_expression .)
    +               shift and go to state 77
    -               shift and go to state 78
    *               shift and go to state 79
    /               shift and go to state 80
    DOTADD          shift and go to state 81
    DOTSUB          shift and go to state 82
    DOTMUL          shift and go to state 83
    DOTDIV          shift and go to state 84
    '               shift and go to state 85


state 146

    (34) array_range -> var [ expression , expression ] .

    =               reduce using rule 34 (array_range -> var [ expression , expression ] .)
    ADDASSIGN       reduce using rule 34 (array_range -> var [ expression , expression ] .)
    SUBASSIGN       reduce using rule 34 (array_range -> var [ expression , expression ] .)
    MULASSIGN       reduce using rule 34 (array_range -> var [ expression , expression ] .)
    DIVASSIGN       reduce using rule 34 (array_range -> var [ expression , expression ] .)


state 147

    (45) conditional -> IF ( expression ) instruction ELSE instruction .

    error           reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    {               reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 45 (conditional -> IF ( expression ) instruction ELSE instruction .)


state 148

    (43) for -> FOR ID = numeric_expression : numeric_expression instruction .

    error           reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    {               reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    IF              reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    WHILE           reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    FOR             reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    BREAK           reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    CONTINUE        reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    RETURN          reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    PRINT           reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    ID              reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    $end            reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    }               reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)
    ELSE            reduce using rule 43 (for -> FOR ID = numeric_expression : numeric_expression instruction .)

